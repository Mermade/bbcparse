{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "Radio & Music Services",
    "description": "We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients."
  },
  "servers": [
    {
      "url": "https://rms.api.bbc.co.uk",
      "description": "Live"
    },
    {
      "url": "https://rms.api.bbc.co.uk",
      "description": "Test"
    }
  ],
  "paths": {
    "/v2/experience/container/{urn}": {
      "get": {
        "deprecated": true,
        "summary": "Containers Page Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/urn"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Display the container details along with the playable items of the container\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceContainerResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/experience/playqueue/{pid}": {
      "get": {
        "summary": "On Demand Page Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Non inline On Demand Experince which consist of display modules of Player and Playqueue.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/experience/stations": {
      "get": {
        "summary": "Stations Page Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Non inline Experience Stations API with Promoted and Local stations display module.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/experience/listen/sign-in": {
      "get": {
        "summary": "Sign in Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Non inline Sign in Experience page with Upsell\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/experience/inline/search": {
      "get": {
        "summary": "Search Inline Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/q"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Inline Experience search results container and playable items as display modules\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceInlineResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/experience/inline/sounds/sign-in": {
      "get": {
        "summary": "Sign in Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Inline Sign in Experience page with Upsell\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "List of categories",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CategoryKind"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Categories"
        ],
        "description": "Retrieve Categories\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "summary": "Category by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CategoryId"
          }
        ],
        "tags": [
          "Categories"
        ],
        "description": "Retrieve Categories by ID\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/categories": {
      "get": {
        "summary": "List of categories",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CategoryKind"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Categories"
        ],
        "description": "Retrieve Categories\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2CategoriesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/categories/{id}": {
      "get": {
        "summary": "Category by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CategoryId"
          }
        ],
        "tags": [
          "Categories"
        ],
        "description": "Retrieve category\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/categories/container": {
      "get": {
        "summary": "List of container categories",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CategoryKind"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Categories"
        ],
        "description": "Retrieve Sounds supported categories in container item form\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerItemsPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/categories/{id}/container": {
      "get": {
        "summary": "Container category by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CategoryId"
          }
        ],
        "tags": [
          "Categories"
        ],
        "description": "Retrieve category container\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/radio/networks.json": {
      "get": {
        "summary": "Networks",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "name": "preset",
            "in": "query",
            "description": "Returns all networks needed for iPlayer Radio responsive web navigation",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "international",
            "in": "query",
            "description": "Returns all networks available internationally",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "tags": [
          "Networks"
        ],
        "description": "All iPlayer Radio networks - contains business logic for masterbrand and service relationships\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworksResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/networks": {
      "get": {
        "summary": "List of networks",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/coverage"
          },
          {
            "$ref": "#/components/parameters/promoted"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Networks"
        ],
        "description": "Provides the list of all the v2 networks\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2NetworksResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/networks/playable": {
      "get": {
        "summary": "List of playable networks",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/coverage"
          },
          {
            "$ref": "#/components/parameters/promoted"
          }
        ],
        "tags": [
          "Networks"
        ],
        "description": "Provides the list of all the playable networks\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/networks/{id}": {
      "get": {
        "summary": "Network by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/NetworkId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "tags": [
          "Networks"
        ],
        "description": "Provides the V2 network by network ID.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2Network"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/networks/{id}/playable": {
      "get": {
        "summary": "Playable network by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/NetworkId"
          }
        ],
        "tags": [
          "Networks"
        ],
        "description": "Provides the network playable item by network ID.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/services/{sid}/tracks/latest/playable": {
      "get": {
        "summary": "List of recently playable tracks",
        "parameters": [
          {
            "$ref": "#/components/parameters/sid"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Services"
        ],
        "description": "Retrieve list of tracks as playable items for a service\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/versions/{vpid}/tracks/playable": {
      "get": {
        "summary": "List of on demand tracks",
        "parameters": [
          {
            "$ref": "#/components/parameters/vpid"
          }
        ],
        "tags": [
          "Versions"
        ],
        "description": "Retrieve list of on demand tracks as playable items for a version id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/broadcasts": {
      "get": {
        "summary": "Broadcasts",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "name": "service",
            "in": "query",
            "description": "Filter by Service ID. E.g. bbc_radio_fourfm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Filter by date. E.g. 2016-06-17",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by provided query. E.g. 'start_at' sorts in ascending order, and '-start_at' sorts in descending order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "start_at",
                "-start_at",
                "end_at",
                "-end_at"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Broadcasts"
        ],
        "description": "All broadcasts\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/broadcasts/{pid}": {
      "get": {
        "summary": "Broadcasts by PID",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "name": "pid",
            "in": "path",
            "description": "Broadcast id",
            "schema": {
              "type": "string"
            },
            "example": "p01lhbfm",
            "required": true
          }
        ],
        "tags": [
          "Broadcasts"
        ],
        "description": "Find broadcast by PID\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastsResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/broadcasts/latest": {
      "get": {
        "summary": "Latest Broadcasts",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/BroadcastService"
          },
          {
            "name": "on_air",
            "in": "query",
            "description": "Filter what is on air. E.g. 'now' returns current programme being broadcasted.",
            "schema": {
              "type": "string",
              "enum": [
                "now",
                "previous",
                "next"
              ]
            }
          },
          {
            "name": "next",
            "in": "query",
            "description": "Filter what will be on air next in minutes. E.g. '240' returns programmes broadcasted in the next four hours",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "previous",
            "in": "query",
            "description": "Filter what was on air previously in minutes. E.g. '240' returns programmes broadcasted in the previous four hours",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/BroadcastSort"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Broadcasts"
        ],
        "description": "Broadcasts for the current day\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/broadcasts/poll/{service_id}": {
      "get": {
        "summary": "Polled Broadcasts by serviceId",
        "parameters": [
          {
            "$ref": "#/components/parameters/PollService_id"
          }
        ],
        "tags": [
          "Broadcasts"
        ],
        "description": "Provide 5 upcoming broadcasts for a network service\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/broadcasts/poll/{service_id}": {
      "get": {
        "summary": "Personalised Polled Broadcasts by serviceId",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/PollService_id"
          }
        ],
        "tags": [
          "Broadcasts"
        ],
        "description": "Provide 5 upcoming broadcasts for a network service with personalised data\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes": {
      "get": {
        "summary": "Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/network"
          },
          {
            "$ref": "#/components/parameters/networkUrlKey"
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "$ref": "#/components/parameters/container"
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Filter by provided query. E.g. 'tleo' returns top level objects, ie. brands, orphaned series, and orphaned episodes",
            "schema": {
              "type": "string",
              "enum": [
                "tleo"
              ]
            },
            "required": false
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by programme type. Accepts comma separated values",
            "schema": {
              "type": "string",
              "enum": [
                "brand",
                "series",
                "episode",
                "clip",
                "episode,clip"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides a paginated list of programmes.\nAccepts various filters and sorting methods.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Programmes"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/items": {
      "get": {
        "summary": "Container & Playable Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/network"
          },
          {
            "$ref": "#/components/parameters/networkUrlKey"
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "$ref": "#/components/parameters/parent"
          },
          {
            "$ref": "#/components/parameters/container"
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Filter by provided query. E.g. 'tleo' returns top level objects, ie. brands, orphaned series, and orphaned episodes",
            "schema": {
              "type": "string",
              "enum": [
                "tleo"
              ]
            },
            "required": false
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by programme type. Accepts comma separated values",
            "schema": {
              "type": "string",
              "enum": [
                "brand",
                "series",
                "episode",
                "clip",
                "brand,series",
                "episode,clip"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides a paginated list of programmes (brands, series, episodes and clips).\nAccepts various filters and sorting methods.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPaginatedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/items/playable": {
      "get": {
        "summary": "Playable Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/network"
          },
          {
            "$ref": "#/components/parameters/networkUrlKey"
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "$ref": "#/components/parameters/parent"
          },
          {
            "$ref": "#/components/parameters/container"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by programme type.",
            "schema": {
              "type": "string",
              "enum": [
                "episode",
                "clip"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides a paginated list of playable programmes (episodes and clips).\nAccepts various filters and sorting methods.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/playable": {
      "get": {
        "summary": "Playable Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/network"
          },
          {
            "$ref": "#/components/parameters/networkUrlKey"
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "$ref": "#/components/parameters/parent"
          },
          {
            "$ref": "#/components/parameters/container"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by programme type. Accepts comma separated values",
            "schema": {
              "type": "string",
              "enum": [
                "episode",
                "clip"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides a paginated list of playable programmes (episodes and clips).\nAccepts various filters and sorting methods.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/{pid}": {
      "get": {
        "summary": "Single Programme By Pid",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Returns single programme details by a programme id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Programme"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/{pid}/item": {
      "get": {
        "summary": "Single Container or Playable Programme By Pid",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Returns single container or playable item by a programme id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/{pid}/playable": {
      "get": {
        "summary": "Single Playable Programme By Pid",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Returns single playable item by a programme id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/playqueue/{pid}": {
      "get": {
        "summary": "Play Queue",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "provides the list of playable items as playqueue based on the programme id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/search/playable": {
      "get": {
        "deprecated": true,
        "summary": "Search Playable Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/q"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides search keywords results as list of playable items\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/search/items": {
      "get": {
        "summary": "Search Container & Playable Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/q"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides search keywords results as list of playable and container items\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/search/items/playable": {
      "get": {
        "summary": "Search Playable Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/q"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides search keywords results as list of playable items\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/programmes/search/items/container": {
      "get": {
        "summary": "Search Container Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/q"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides search keywords results as list of container items\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerItemsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/collections/{pid}/container": {
      "get": {
        "summary": "Single Container Collection By Pid",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CollectionPid"
          }
        ],
        "tags": [
          "Collections"
        ],
        "description": "Collection container item for a collection pid\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/collections/{pid}/members/playable": {
      "get": {
        "summary": "Collection Playable Members",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CollectionPid"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Collections"
        ],
        "description": "Playable Items from Collection\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/collections/{pid}/members/container": {
      "get": {
        "summary": "Collection Container Members",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CollectionPid"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Collections"
        ],
        "description": "Container Items from Collection\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerItemsResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/podcasts": {
      "get": {
        "summary": "All Podcasts",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/podcastsort"
          },
          {
            "name": "network",
            "in": "query",
            "description": "Network Master Brand ID (mid)",
            "schema": {
              "type": "string",
              "example": "bbc_radio_one"
            },
            "required": false
          },
          {
            "name": "network_url_key",
            "in": "query",
            "description": "Network URL key",
            "schema": {
              "type": "string",
              "example": "radio1"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/coverage"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Podcasts"
        ],
        "description": "Retrieve all Podcasts\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodcastsResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/podcasts/featured": {
      "get": {
        "summary": "Featured Podcasts",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Podcasts"
        ],
        "description": "Retrieve featured podcasts\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodcastsFeaturedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/podcasts/{pid}": {
      "get": {
        "summary": "Podcast",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/PodcastPid"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Podcasts"
        ],
        "description": "Retrieve data about the podcast with the supplied PID\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodcastsResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/podcasts/{pid}/episodes": {
      "get": {
        "summary": "Podcast Episodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/PodcastPid"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Podcasts"
        ],
        "description": "Retrieve all episodes for a specific podcast\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodcastEpisodesResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/podcasts/{pid}/episodes/playable": {
      "get": {
        "summary": "Podcast Episodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/PodcastPid"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Podcasts"
        ],
        "description": "Retrieve all episodes for a specific podcast as Playable items\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/radio/popular": {
      "get": {
        "summary": "Popular Episodes & Clips",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/network"
          },
          {
            "$ref": "#/components/parameters/networkUrlKey"
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "$ref": "#/components/parameters/container"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Programme type required. Accepts comma separated values",
            "schema": {
              "type": "string",
              "enum": [
                "episode",
                "clip",
                "episode,clip"
              ]
            },
            "required": false
          },
          {
            "name": "distinct",
            "in": "query",
            "description": "Filter by deduplication rule. E.g. 'tleo' returns programmes with distinct top level episode objects",
            "schema": {
              "type": "string",
              "enum": [
                "tleo"
              ]
            },
            "required": false
          },
          {
            "name": "format",
            "in": "query",
            "description": "Filter by format. Accepts comma separated values",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter by group. Accepts comma separated values",
            "schema": {
              "type": "string",
              "enum": [
                "tv",
                "radio",
                "tv,radio"
              ]
            },
            "required": false
          },
          {
            "name": "media_type",
            "in": "query",
            "description": "Filter by programme media type. Accepts comma separated values",
            "schema": {
              "type": "string",
              "enum": [
                "audio",
                "video",
                "audio,video"
              ]
            },
            "required": false
          },
          {
            "name": "media_set",
            "in": "query",
            "description": "Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all",
            "schema": {
              "type": "string",
              "enum": [
                "pc",
                "mobile-download",
                "android-download-high",
                "apple-ios-download-high",
                "mobile-cellular-main",
                "mobile-phone-main",
                "iptv-all"
              ]
            },
            "required": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search keyword",
            "schema": {
              "type": "string",
              "example": "archers"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Retrieve Popular Episodes & Clips\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PopularResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/radio/programmes": {
      "get": {
        "deprecated": true,
        "summary": "Radio programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/network"
          },
          {
            "$ref": "#/components/parameters/networkUrlKey"
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "$ref": "#/components/parameters/container"
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Filter by provided query. E.g. 'tleo' returns top level objects, ie. brands, orphaned series, and orphaned episodes",
            "schema": {
              "type": "string",
              "enum": [
                "tleo"
              ]
            },
            "required": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by provided query. E.g. 'title' sorts in ascending order, and -title sorts in descending order",
            "schema": {
              "type": "string",
              "enum": [
                "available_from_date",
                "-available_from_date",
                "title",
                "-title"
              ]
            },
            "required": false
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by programme type. Accepts comma separated values",
            "schema": {
              "type": "string",
              "enum": [
                "brand",
                "series",
                "episode",
                "clip",
                "episode,clip",
                "brand,series"
              ]
            },
            "required": false
          },
          {
            "name": "media_type",
            "in": "query",
            "description": "Filter by media type (audio_video will return video values)",
            "schema": {
              "type": "string",
              "enum": [
                "audio",
                "video",
                "audio_video"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Provides a paginated list of programmes by PID (brand, series, episode and clip). Accepts various filters and sorting methods.\n",
        "operationId": "getRadioProgrammes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgrammesResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/radio/programmes/{pid}": {
      "get": {
        "deprecated": true,
        "summary": "Available radio programme by Pid",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Programmes"
        ],
        "description": "Find programmes by PID (brand, series, episode and clip)\n",
        "operationId": "getRadioProgrammesByPid",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgrammesResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/activities": {
      "post": {
        "summary": "Write Activity",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "description": "Body for the activities follow or favourites",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "urn": {
                    "type": "string",
                    "example": "urn:bbc:radio:episode:b08vxv2w"
                  }
                },
                "required": [
                  "urn"
                ]
              }
            }
          }
        },
        "tags": [
          "Personalised Activities"
        ],
        "description": "Accepts the URN as body and start process write activity to UAS\n",
        "responses": {
          "202": {
            "$ref": "#/components/responses/TextResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/activities/{urn}": {
      "delete": {
        "summary": "Delete Activity",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/urn"
          }
        ],
        "tags": [
          "Personalised Activities"
        ],
        "description": "Accepts the URN and start process delete activity from UAS\n",
        "responses": {
          "202": {
            "$ref": "#/components/responses/TextResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/collections/{pid}/members/playable": {
      "get": {
        "summary": "Personalised Collection Playable Members",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/CollectionPid"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Collections"
        ],
        "description": "Personalised Playable Items from Collection\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/experience/listen": {
      "get": {
        "summary": "Listen Page Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Non inline Listen page Experience API\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/experience/inline/listen": {
      "get": {
        "summary": "Listen Page Inline Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Inline Experience listen page API\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceInlineResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/experience/sounds": {
      "get": {
        "summary": "My Sounds Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Non inline my sounds experience API\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/experience/inline/sounds": {
      "get": {
        "summary": "My Sounds Inline Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Inline My Sounds Experience API\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceInlineResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/experience/inline/search": {
      "get": {
        "summary": "Personalised Search Inline Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/q"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Personalised Inline Experience search results container and playable items as display modules\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceInlineResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/experience/playqueue/{pid}": {
      "get": {
        "summary": "Personalised On Demand Page Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Non inline personalised On Demand Experince which consist of display modules of Player, Playqueue and Recommendations.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/experience/container/{urn}": {
      "get": {
        "summary": "Personalised Containers Page Experience",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/urn"
          }
        ],
        "tags": [
          "Experience"
        ],
        "description": "Display the container details along with the personalised playable items of the container\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceContainerResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/plays": {
      "post": {
        "summary": "Write Play Event",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "description": "Body for the play data event",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "started",
                      "ended",
                      "paused",
                      "heartbeat"
                    ]
                  },
                  "resource_type": {
                    "type": "string",
                    "enum": [
                      "episode",
                      "clip"
                    ]
                  },
                  "play_mode": {
                    "type": "string",
                    "enum": [
                      "live"
                    ]
                  },
                  "pid": {
                    "type": "string",
                    "example": "b08vxv2w"
                  },
                  "version_pid": {
                    "type": "string",
                    "example": "b08vxtj4"
                  },
                  "elapsed_time": {
                    "type": "integer",
                    "example": 80
                  }
                },
                "required": [
                  "action",
                  "resource_type",
                  "pid",
                  "version_pid",
                  "elapsed_time"
                ]
              }
            }
          }
        },
        "tags": [
          "Personalised Programmes"
        ],
        "description": "Accepts the play data & start processing write action to UAS\n",
        "responses": {
          "202": {
            "$ref": "#/components/responses/TextResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/plays/playable": {
      "get": {
        "summary": "List of played programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "provides list of play history in playable items for a user\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/favourites/playable": {
      "get": {
        "summary": "List of favourite programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "Returns list of programmes favourited by user\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/follows": {
      "get": {
        "summary": "List of favourite programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by provided query. E.g. 'title' sorts in ascending order",
            "schema": {
              "type": "string",
              "enum": [
                "title"
              ]
            },
            "required": false
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "Returns list of programmes followed by user\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerItemsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/follows/playable": {
      "get": {
        "summary": "Programmes from followed brands & series",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "Returns list of latest playable programmes from followed brands and series\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/recommendations/playable": {
      "get": {
        "summary": "List of recommended programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "Recommended Programmes from the Audience Platforms' Recomendations Service\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/playqueue/{pid}": {
      "get": {
        "summary": "Play Queue",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "provides the list of playable items as playqueue based on the programme id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/playable": {
      "get": {
        "summary": "Playable Programmes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/network"
          },
          {
            "$ref": "#/components/parameters/networkUrlKey"
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "$ref": "#/components/parameters/parent"
          },
          {
            "$ref": "#/components/parameters/container"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by programme type.",
            "schema": {
              "type": "string",
              "enum": [
                "episode",
                "clip"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "Provides a paginated list of personalised playable programmes (episodes and clips).\nAccepts various filters and sorting methods.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItemsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/{pid}/item": {
      "get": {
        "summary": "Single Container or Playable Programme By Pid",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "Returns personalised single container or playable item by a programme id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/v2/my/programmes/{pid}/playable": {
      "get": {
        "summary": "Single Playable Programme By Pid",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/pid"
          }
        ],
        "tags": [
          "Personalised Programmes"
        ],
        "description": "Returns single personalised playable item by a programme id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayableItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Notfound"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/my/radio/favourites": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        }
      ],
      "get": {
        "summary": "Favourite Episodes and Clips",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order for Personalised Radio results",
            "schema": {
              "type": "string",
              "enum": [
                "programme_titles",
                "available_from_date",
                "available_to_date"
              ]
            },
            "required": false
          },
          {
            "name": "show_all_activity",
            "in": "query",
            "description": "Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "tags": [
          "Radio"
        ],
        "description": "List of favourited episodes and clips for a given user for iPlayer Radio.\n\nN.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode\nand Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for\n anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification\n",
        "operationId": "getPersonalisedRadioFavourites",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Favourite Episodes and Clips",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonalisedRadioBatchRequest"
                }
              }
            }
          }
        },
        "tags": [
          "Radio"
        ],
        "description": "Update user favourites\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "putPersonalisedRadioBatch",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Favourite Episodes and Clips",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonalisedRadioBatchRequest"
                }
              }
            }
          }
        },
        "tags": [
          "Radio"
        ],
        "description": "Add User favourites\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "postPersonalisedRadioBatch",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      }
    },
    "/my/radio/favourites/{type}": {
      "get": {
        "summary": "Favourite Episodes and Clips by Type",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/X-Authentication-Provider"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Supported Radio favourite types: Clips or Episodes",
            "schema": {
              "type": "string",
              "enum": [
                "clips",
                "episodes"
              ]
            },
            "required": true
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order for Personalised Radio results",
            "schema": {
              "type": "string",
              "enum": [
                "programme_titles",
                "available_from_date",
                "available_to_date"
              ]
            },
            "required": false
          },
          {
            "name": "show_all_activity",
            "in": "query",
            "description": "Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Radio"
        ],
        "description": "List of followed 'clips' or 'episode' items for a given iPlayer Radio user\n",
        "operationId": "getPersonalisedRadioFavouritesByType",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      }
    },
    "/my/radio/favourites/{type}/{pid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        },
        {
          "name": "type",
          "in": "path",
          "description": "Supported Radio favourite types: Clips or Episodes",
          "schema": {
            "type": "string",
            "enum": [
              "clips",
              "episodes"
            ]
          },
          "required": true
        },
        {
          "$ref": "#/components/parameters/pid"
        }
      ],
      "get": {
        "summary": "Favourite Episode or Clip",
        "parameters": [
          {
            "name": "show_all_activity",
            "in": "query",
            "description": "Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "tags": [
          "Radio"
        ],
        "description": "Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.\n",
        "operationId": "getPersonalisedRadioByActivityTypeById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/RadioErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Favourite Episode or Clip",
        "tags": [
          "Radio"
        ],
        "description": "Update user favourite\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "putPersonalisedRadioByActivityTypeById",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalisedRadioRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/RadioErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Favourite Episode or Clip",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalisedRadioRequest"
              }
            }
          }
        },
        "tags": [
          "Radio"
        ],
        "description": "Add User favourite\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "postPersonalisedRadioByActivityTypeById",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/RadioErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "delete": {
        "summary": "Favourite Episode or Clip",
        "tags": [
          "Radio"
        ],
        "description": "Remove User favourite\n",
        "operationId": "deletePersonalisedRadioByActivityTypeById",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/RadioErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      }
    },
    "/my/radio/follows": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        }
      ],
      "get": {
        "summary": "Followed Brands and Series",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order for Personalised Radio results",
            "schema": {
              "type": "string",
              "enum": [
                "programme_titles",
                "available_from_date",
                "available_to_date"
              ]
            },
            "required": false
          },
          {
            "name": "show_all_activity",
            "in": "query",
            "description": "Include items which have been 'soft' unfollowed in response. I.e items with UAS type of 'unfollowed'",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Radio"
        ],
        "description": "List of favourited brands and series for a given user for iPlayer Radio.\n",
        "operationId": "getPersonalisedRadioFollows",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Followed Brands and Series",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonalisedRadioBatchRequest"
                }
              }
            }
          }
        },
        "tags": [
          "Radio"
        ],
        "description": "Update 'brands' or 'series' items from a users iPlayer Radio follows\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "putPersonalisedRadioFollowsBatch",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Followed Brands and Series",
        "tags": [
          "Radio"
        ],
        "description": "Add 'brand' or 'series' items to a users iPlayer Radio follows\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "postPersonalisedRadioFollowsBatch",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonalisedRadioBatchRequest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      }
    },
    "/my/radio/follows/{type}": {
      "get": {
        "summary": "Followed Brands or Series by Type",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/X-Authentication-Provider"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Supported Radio follows types: Brands or Series",
            "schema": {
              "type": "string",
              "enum": [
                "brands",
                "series"
              ]
            },
            "required": true
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order for Personalised Radio results",
            "schema": {
              "type": "string",
              "enum": [
                "programme_titles",
                "available_from_date",
                "available_to_date"
              ]
            },
            "required": false
          },
          {
            "name": "show_all_activity",
            "in": "query",
            "description": "Include items which have been 'soft' unfollowed in response. I.e items with UAS type of 'unfollowed'",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Radio"
        ],
        "description": "List of followed 'brand' or 'series' items for a given iPlayer Radio user\n",
        "operationId": "getPersonalisedRadioFollowsByType",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      }
    },
    "/my/radio/follows/{type}/{pid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        },
        {
          "name": "type",
          "in": "path",
          "description": "Supported Radio follows types: Brands or Series",
          "schema": {
            "type": "string",
            "enum": [
              "brands",
              "series"
            ]
          },
          "required": true
        },
        {
          "$ref": "#/components/parameters/pid"
        }
      ],
      "get": {
        "summary": "Followed Brand or Series",
        "tags": [
          "Radio"
        ],
        "description": "Check to see if a single brand or series entity is in a users follows - determines UX of add button.\n",
        "operationId": "getPersonalisedRadioFollowsByTypeById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/RadioErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Followed Brand or Series",
        "requestBody": {
          "description": "Action followed or unfollowed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalisedRadioRequest"
              }
            }
          }
        },
        "tags": [
          "Radio"
        ],
        "description": "Update 'brand' or 'series' items from a users iPlayer Radio follows\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "putPersonalisedRadioFollowsByTypeById",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/RadioErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Followed Brand or Series",
        "requestBody": {
          "description": "Action followed or unfollowed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalisedRadioRequest"
              }
            }
          }
        },
        "tags": [
          "Radio"
        ],
        "description": "Add 'brand' or 'series' items from a users iPlayer Radio follows\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "postPersonalisedRadioFollowsByTypeById",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/RadioErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      },
      "delete": {
        "summary": "Followed Brand or Series",
        "tags": [
          "Radio"
        ],
        "description": "Remove 'brand' or 'series' items from a users iPlayer Radio follows\n",
        "operationId": "deletePersonalisedRadioFollowsByTypeById",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedRadioSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/RadioErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/RadioErrorMessage"
          }
        }
      }
    },
    "/my/music/favourites": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        }
      ],
      "get": {
        "summary": "Favourite Tracks or Clips",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filters activities based on the type of action",
            "schema": {
              "type": "string",
              "enum": [
                "favourited",
                "unfavourited"
              ]
            },
            "required": false
          },
          {
            "name": "music-data",
            "in": "query",
            "description": "Omits music data from the response, defaults to true",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "tags": [
          "Music"
        ],
        "description": "List of favourited tracks and clips for a given user for BBC Music.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Favourite Tracks or Clips",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonalisedMusicBatchRequest"
                }
              }
            }
          }
        },
        "tags": [
          "Music"
        ],
        "description": "Update tracks or clips from a BBC Music user favourites.\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Favourite Tracks or Clips",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonalisedMusicBatchRequest"
                }
              }
            }
          }
        },
        "tags": [
          "Music"
        ],
        "description": "Add multiple tracks and/or clips to a BBC Music user's favourites.\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      }
    },
    "/my/music/favourites/{type}": {
      "get": {
        "summary": "Favourite Tracks or Clips by Type",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/X-Authentication-Provider"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Supported Music favourite types: Clips or Tracks",
            "schema": {
              "type": "string",
              "enum": [
                "clips",
                "tracks"
              ]
            },
            "required": true
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filters activities based on the type of action",
            "schema": {
              "type": "string",
              "enum": [
                "favourited",
                "unfavourited"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Music"
        ],
        "description": "List of favourited tracks or clips for a given user for BBC Music.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      }
    },
    "/my/music/favourites/{type}/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        },
        {
          "name": "type",
          "in": "path",
          "description": "Supported Music favourite types: Clips or Tracks",
          "schema": {
            "type": "string",
            "enum": [
              "clips",
              "tracks"
            ]
          },
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "description": "Clip PID or Track ID",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Favourite Track or Clip",
        "tags": [
          "Music"
        ],
        "description": "Check to see if a single track or clip entity is in a users favourites - determines UX of add button.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/MusicErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Favourite Track or Clip",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalisedMusicRequest"
              }
            }
          }
        },
        "tags": [
          "Music"
        ],
        "description": "Update tracks or clips from a BBC Music user favourites.\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/MusicErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Favourite Track or Clip",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalisedMusicRequest"
              }
            }
          }
        },
        "tags": [
          "Music"
        ],
        "description": "Add track or clip to a BBC Music user favourites.\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/MusicErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "delete": {
        "summary": "Favourite Track or Clip",
        "tags": [
          "Music"
        ],
        "description": "Delete track or clip from a BBC Music user favourites.\n",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/MusicErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      }
    },
    "/my/music/follows": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        },
        {
          "name": "action",
          "in": "query",
          "description": "Filters activities based on the type of action",
          "schema": {
            "type": "string",
            "enum": [
              "followed",
              "unfollowed"
            ]
          },
          "required": false
        },
        {
          "name": "music-data",
          "in": "query",
          "description": "Omits music data from the response, defaults to true",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "music_context",
          "in": "query",
          "description": "Specify context to be passed to Music API",
          "schema": {
            "type": "string",
            "enum": [
              "events",
              "ivote",
              "music",
              "musicplaylist",
              "programmes",
              "radio",
              "unknown"
            ]
          },
          "required": false
        },
        {
          "name": "music_within_uk",
          "in": "query",
          "description": "Specify location to be passed to Music API",
          "schema": {
            "type": "boolean"
          },
          "required": false
        }
      ],
      "get": {
        "summary": "Followed Networks, Categories, Artists, Playlists and Genres",
        "tags": [
          "Music"
        ],
        "description": "List of followed networks, categories, artists, playlists and genres for a given user for BBC Music.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Followed Networks, Categories, Artists, Playlists and Genres",
        "requestBody": {
          "description": "Action followed or unfollowed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonalisedMusicBatchRequest"
                }
              }
            }
          }
        },
        "tags": [
          "Music"
        ],
        "description": "Update networks, categories, artists, playlists, networks, genres or services in a users follows\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Followed Networks, Categories, Artists, Playlists and Genres",
        "requestBody": {
          "description": "Action favourited or unfavourited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonalisedMusicBatchRequest"
                }
              }
            }
          }
        },
        "tags": [
          "Music"
        ],
        "description": "Add networks, categories, artists, playlists, networks, genres or services in a users follows\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      }
    },
    "/my/music/follows/{type}": {
      "get": {
        "summary": "Followed Networks, Categories, Artists, Playlists and Genres by Type",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/X-Authentication-Provider"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Supported Music follows types: Playlists, Services, Genres & Artists",
            "schema": {
              "type": "string",
              "enum": [
                "playlists",
                "services",
                "networks",
                "genres",
                "categories",
                "artists"
              ]
            },
            "required": true
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filters activities based on the type of action",
            "schema": {
              "type": "string",
              "enum": [
                "followed",
                "unfollowed"
              ]
            },
            "required": false
          },
          {
            "name": "music-data",
            "in": "query",
            "description": "Omits music data from the response, defaults to true",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "music_context",
            "in": "query",
            "description": "Specify context to be passed to Music API",
            "schema": {
              "type": "string",
              "enum": [
                "events",
                "ivote",
                "music",
                "musicplaylist",
                "programmes",
                "radio",
                "unknown"
              ]
            },
            "required": false
          },
          {
            "name": "music_within_uk",
            "in": "query",
            "description": "Specify location to be passed to Music API",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Music"
        ],
        "description": "List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      }
    },
    "/my/music/follows/{type}/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        },
        {
          "name": "type",
          "in": "path",
          "description": "Supported Music follows types: Playlists, Services, Genres & Artists",
          "schema": {
            "type": "string",
            "enum": [
              "playlists",
              "services",
              "networks",
              "genres",
              "categories",
              "artists"
            ]
          },
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "description": "Playlists, Services, Networks, Genres, Categories or Artists ID",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "music-data",
          "in": "query",
          "description": "Omits music data from the response, defaults to true",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "music_context",
          "in": "query",
          "description": "Specify context to be passed to Music API",
          "schema": {
            "type": "string",
            "enum": [
              "events",
              "ivote",
              "music",
              "musicplaylist",
              "programmes",
              "radio",
              "unknown"
            ]
          },
          "required": false
        },
        {
          "name": "music_within_uk",
          "in": "query",
          "description": "Specify location to be passed to Music API",
          "schema": {
            "type": "boolean"
          },
          "required": false
        }
      ],
      "get": {
        "summary": "Followed Network, Category, Artist, Playlist and Genre",
        "tags": [
          "Music"
        ],
        "description": "Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button.\n",
        "operationId": "getPersonalisedMusicFollowsByTypeById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/MusicErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Followed Network, Category, Artist, Playlist and Genre",
        "requestBody": {
          "description": "Action followed or unfollowed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalisedMusicRequest"
              }
            }
          }
        },
        "tags": [
          "Music"
        ],
        "description": "Update a single network, category, artist, playlist, network, genre or service entity is in a users follows\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "putPersonalisedMusicFollowsByTypeById",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/MusicErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Followed Network, Category, Artist, Playlist and Genre",
        "requestBody": {
          "description": "Action followed or unfollowed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalisedMusicRequest"
              }
            }
          }
        },
        "tags": [
          "Music"
        ],
        "description": "Add a single network, category, artist, playlist, network, genre or service entity is in a users follows\n\nN.B. Any HTML tags submitted in metadata will be removed\n",
        "operationId": "postPersonalisedMusicFollowsByTypeById",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/MusicErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      },
      "delete": {
        "summary": "Followed Network, Category, Artist, Playlist and Genre",
        "tags": [
          "Music"
        ],
        "description": "Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows\n",
        "operationId": "deletePersonalisedMusicFollowsByTypeById",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalisedMusicSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/MusicErrorMessage"
          },
          "default": {
            "$ref": "#/components/responses/MusicErrorMessage"
          }
        }
      }
    },
    "/my/music/export": {
      "get": {
        "summary": "Music Exports",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/X-Authentication-Provider"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Music Export"
        ],
        "description": "Returns status of all previous third party export actions for a given BBC Music user.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicExportJob"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      }
    },
    "/my/music/exports/jobs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        },
        {
          "$ref": "#/components/parameters/over16"
        },
        {
          "name": "vendor",
          "in": "query",
          "description": "Specify Vendor Jobs",
          "schema": {
            "type": "string",
            "enum": [
              "spotify",
              "deezer",
              "youtube",
              "itunes"
            ]
          },
          "required": false
        }
      ],
      "get": {
        "summary": "Music Export Jobs",
        "tags": [
          "Music Export"
        ],
        "description": "All items associated to a users export request\n",
        "operationId": "getMusicExportJobs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicExportJob"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Music Export Jobs",
        "requestBody": {
          "description": "Export data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MusicExportJob"
                }
              }
            }
          }
        },
        "tags": [
          "Music Export"
        ],
        "description": "Create Export Job for a user\n",
        "operationId": "postMusicExportJob",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicExportSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      }
    },
    "/my/music/exports/tracks": {
      "get": {
        "summary": "Music Export Tracks",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/X-Authentication-Provider"
          },
          {
            "$ref": "#/components/parameters/over16"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "vendor",
            "in": "query",
            "description": "Specify Vendor Tracks",
            "schema": {
              "type": "string",
              "enum": [
                "spotify",
                "deezer",
                "youtube",
                "itunes"
              ]
            },
            "required": false
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specify Track status",
            "schema": {
              "type": "string",
              "enum": [
                "failed",
                "done",
                "pending"
              ]
            },
            "required": false
          }
        ],
        "tags": [
          "Music Export"
        ],
        "description": "Retrieves vendor and status specific tracks\n",
        "operationId": "getMusicExportTracks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicExportJob"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      }
    },
    "/my/music/preferences/export": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        }
      ],
      "get": {
        "summary": "Music Export Preferences",
        "tags": [
          "Music Export"
        ],
        "description": "Returns export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.\n",
        "operationId": "getMusicPreferencesExport",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicExportPreferencesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Music Export Preferences",
        "requestBody": {
          "description": "Export data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MusicExportPreferences"
              }
            }
          }
        },
        "tags": [
          "Music Export"
        ],
        "description": "Create export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.\n",
        "operationId": "postMusicPreferencesExport",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicExportSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      },
      "delete": {
        "summary": "Music Export Preferences",
        "tags": [
          "Music Export"
        ],
        "description": "Remove export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.\n",
        "operationId": "deleteMusicPreferencesExport",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicExportSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      }
    },
    "/my/music/preferences/export/{vendor}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-API-Key"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/X-Authentication-Provider"
        },
        {
          "name": "vendor",
          "in": "path",
          "description": "Supported 3rd Party Vendor",
          "schema": {
            "type": "string",
            "enum": [
              "spotify",
              "deezer",
              "youtube",
              "itunes"
            ]
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Music Export Vendor Preferences",
        "tags": [
          "Music Export"
        ],
        "description": "Returns vendor specific export preferences for a given BBC Music user.\n",
        "operationId": "getMusicPreferencesExportVendor",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicExportPreferencesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      },
      "put": {
        "summary": "Music Export Vendor Preferences",
        "requestBody": {
          "description": "Export data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MusicExportPreferences"
              }
            }
          }
        },
        "tags": [
          "Music Export"
        ],
        "description": "Update vendor specific export preferences for a given BBC Music user.\n",
        "operationId": "putMusicPreferencesExportVendor",
        "responses": {
          "202": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      },
      "post": {
        "summary": "Music Export Vendor Preferences",
        "requestBody": {
          "description": "Export data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MusicExportPreferences"
              }
            }
          }
        },
        "tags": [
          "Music Export"
        ],
        "description": "Create Vendor specific export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.\n",
        "operationId": "postMusicPreferencesExportVendor",
        "responses": {
          "202": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      },
      "delete": {
        "summary": "Music Export Vendor Preferences",
        "tags": [
          "Music Export"
        ],
        "description": "Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.\n",
        "operationId": "deleteMusicPreferencesExportVendor",
        "responses": {
          "202": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/MusicExportErrorMessage"
          }
        }
      }
    },
    "/music/popular/artists": {
      "get": {
        "summary": "Popular Artists",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/decomposed"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Music"
        ],
        "description": "List of Most Popular artists from BBC Music.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicPopularityArtists"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/music/popular/artists/{id}": {
      "get": {
        "summary": "Single Artist Popularity",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/decomposed"
          },
          {
            "name": "id",
            "in": "path",
            "description": "MusicBrainz Id - Used to get single resource score",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Music"
        ],
        "description": "Popularity Artist By Id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicPopularityArtists"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "404": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/music/popular/playlists": {
      "get": {
        "summary": "Popular Playlists",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/decomposed"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Music"
        ],
        "description": "List of Most Popular playlists from BBC Music.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicPopularityPlaylists"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/music/popular/playlists/{id}": {
      "get": {
        "summary": "Single Playlist Popularity",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/decomposed"
          },
          {
            "name": "id",
            "in": "path",
            "description": "BBC Music Playlist Id - Used to get single resource score",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Music"
        ],
        "description": "Popular playlist by Id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicPopularityPlaylists"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "404": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/music/popular/tracks": {
      "get": {
        "summary": "Popular Tracks",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/MusicNetwork"
          },
          {
            "$ref": "#/components/parameters/programme"
          },
          {
            "$ref": "#/components/parameters/artist"
          },
          {
            "$ref": "#/components/parameters/decomposed"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "description": "List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme.\n",
        "tags": [
          "Music"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicPopularityTracks"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    },
    "/music/popular/tracks/{id}": {
      "get": {
        "summary": "Single Track Popularity",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-API-Key"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/MusicNetwork"
          },
          {
            "$ref": "#/components/parameters/programme"
          },
          {
            "$ref": "#/components/parameters/artist"
          },
          {
            "$ref": "#/components/parameters/decomposed"
          },
          {
            "name": "id",
            "in": "path",
            "description": "BBC Music Track Id - Used to get single resource score",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Music"
        ],
        "description": "Popular Track for BBC Music\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicPopularityTracks"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "404": {
            "$ref": "#/components/responses/v1ErrorStates"
          },
          "default": {
            "$ref": "#/components/responses/InternalServiceError"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Bearer OAUTH_TOKEN",
        "schema": {
          "type": "string",
          "default": "Bearer OAUTH_TOKEN"
        },
        "required": true
      },
      "X-Authentication-Provider": {
        "name": "X-Authentication-Provider",
        "in": "header",
        "description": "Authentication type",
        "schema": {
          "type": "string",
          "default": "idv5"
        },
        "required": true
      },
      "X-API-Key": {
        "name": "X-API-Key",
        "in": "header",
        "description": "API_KEY",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Paginated results offset",
        "schema": {
          "type": "integer"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Paginated results limit",
        "schema": {
          "type": "integer"
        }
      },
      "BroadcastService": {
        "name": "service",
        "in": "query",
        "description": "Filter by Service ID. E.g. bbc_radio_fourfm",
        "schema": {
          "type": "string"
        }
      },
      "BroadcastSort": {
        "name": "sort",
        "in": "query",
        "description": "Sort by provided query. E.g. 'start_at' sorts in ascending order, and '-start_at' sorts in descending order",
        "schema": {
          "type": "string",
          "enum": [
            "start_at",
            "-start_at",
            "end_at",
            "-end_at"
          ]
        }
      },
      "PollService_id": {
        "name": "service_id",
        "in": "path",
        "description": "Network service id",
        "schema": {
          "type": "string"
        },
        "example": "bbc_radio_one",
        "required": true
      },
      "CategoryKind": {
        "name": "kind",
        "in": "query",
        "description": "Filter by provided query. E.g. 'promoted' returns promoted categories",
        "schema": {
          "type": "string",
          "enum": [
            "promoted"
          ]
        }
      },
      "CategoryId": {
        "name": "id",
        "in": "path",
        "description": "Category Id",
        "schema": {
          "type": "string"
        },
        "example": "sport-football-europeanchampionship",
        "required": true
      },
      "CollectionPid": {
        "name": "pid",
        "in": "path",
        "description": "Collection PID",
        "schema": {
          "type": "string"
        },
        "example": "p00zddyq",
        "required": true
      },
      "urn": {
        "name": "urn",
        "in": "path",
        "description": "URN of the programme",
        "schema": {
          "type": "string",
          "example": "urn:bbc:radio:series:b0b5dblt"
        },
        "required": true
      },
      "pid": {
        "name": "pid",
        "in": "path",
        "description": "Programme id",
        "schema": {
          "type": "string"
        },
        "example": "p059v4ph",
        "required": true
      },
      "vpid": {
        "name": "vpid",
        "in": "path",
        "description": "Version id",
        "schema": {
          "type": "string"
        },
        "example": "p06hbq7l",
        "required": true
      },
      "network": {
        "name": "network",
        "in": "query",
        "description": "Filter by network master brand ID (mid). Accepts comma separated values",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "networkUrlKey": {
        "name": "network_url_key",
        "in": "query",
        "description": "Filter by network URL key. Accepts comma separated values",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "category": {
        "name": "category",
        "in": "query",
        "description": "Filter by category id. Accepts comma separated values.",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "parent": {
        "name": "parent",
        "in": "query",
        "description": "Filter by parent. Accepts any brand or series pid",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "container": {
        "name": "container",
        "in": "query",
        "description": "Filter by container. Accepts any brand or series pid",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "description": "Sort by provided query. E.g. 'available_from_date' sorts in ascending order, and -available_from_date sorts in descending order",
        "schema": {
          "type": "string",
          "enum": [
            "available_from_date",
            "-available_from_date"
          ]
        },
        "required": false
      },
      "q": {
        "name": "q",
        "in": "query",
        "description": "Search keyword",
        "schema": {
          "type": "string"
        },
        "example": "archers",
        "required": true
      },
      "sid": {
        "name": "sid",
        "in": "path",
        "description": "service id for the tracks",
        "required": true,
        "schema": {
          "type": "string",
          "example": "bbc_radio_one"
        }
      },
      "NetworkId": {
        "name": "id",
        "in": "path",
        "description": "Network Id",
        "schema": {
          "type": "string"
        },
        "example": "bbc_radio_one",
        "required": true
      },
      "coverage": {
        "name": "coverage",
        "in": "query",
        "description": "Local, National or Regional Coverage",
        "schema": {
          "type": "string",
          "enum": [
            "local",
            "national",
            "regional"
          ]
        },
        "required": false
      },
      "promoted": {
        "name": "promoted",
        "in": "query",
        "description": "Promoted networks only",
        "schema": {
          "type": "boolean"
        },
        "required": false
      },
      "PodcastPid": {
        "name": "pid",
        "in": "path",
        "description": "Podcast id",
        "schema": {
          "type": "string"
        },
        "example": "p02nrtyg",
        "required": true
      },
      "podcastsort": {
        "name": "sort",
        "in": "query",
        "description": "Sort order for Podcasts results",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "title",
            "-title",
            "available_from_date",
            "-available_from_date"
          ]
        }
      },
      "since": {
        "name": "since",
        "in": "query",
        "description": "ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "until": {
        "name": "until",
        "in": "query",
        "description": "ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "decomposed": {
        "name": "decomposed",
        "in": "query",
        "description": "In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "programme": {
        "name": "programme",
        "in": "query",
        "description": "Items with given Programme Pid",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "artist": {
        "name": "artist",
        "in": "query",
        "description": "MusicBrainz artist ID",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "MusicNetwork": {
        "name": "network",
        "in": "query",
        "description": "Return items with given Network ID",
        "schema": {
          "type": "string",
          "example": "bbc_radio_one"
        },
        "required": false
      },
      "over16": {
        "name": "over16",
        "in": "query",
        "description": "Boolean age check",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "rights": {
        "name": "rights",
        "in": "query",
        "description": "Only return available results for the web/mobile.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "web",
            "mobile"
          ]
        }
      }
    },
    "schemas": {
      "PersonalisedCategoriesResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedCategories"
            }
          }
        },
        "required": [
          "$schema",
          "total",
          "limit",
          "offset",
          "results"
        ]
      },
      "PersonalisedCategories": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Category"
          }
        },
        "required": [
          "type",
          "created",
          "data"
        ]
      },
      "PersonalisedNetworksResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedNetworks"
            }
          }
        },
        "required": [
          "$schema",
          "total",
          "limit",
          "offset",
          "results"
        ]
      },
      "PersonalisedNetworks": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Network"
          }
        },
        "required": [
          "type",
          "created",
          "data"
        ]
      },
      "RadioErrorResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RadioError"
            }
          }
        },
        "required": [
          "$schema",
          "errors"
        ]
      },
      "RadioError": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "detail": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "href": {
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "code",
          "id",
          "status",
          "detail",
          "title",
          "href"
        ]
      },
      "MusicPopularityError": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PersonalisedRadioErrorResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "integer"
                },
                "code": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "detail": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "href": {
                  "type": "string"
                }
              },
              "required": [
                "timestamp",
                "code",
                "id",
                "status",
                "detail",
                "title",
                "href"
              ]
            }
          }
        },
        "required": [
          "$schema",
          "errors"
        ]
      },
      "PersonalisedRadioSuccessResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "replied_at": {
            "type": "string"
          }
        },
        "required": [
          "$schema",
          "method",
          "replied_at"
        ]
      },
      "PersonalisedMusicErrorResponse": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicError"
            }
          }
        },
        "required": [
          "schema",
          "errors"
        ]
      },
      "PersonalisedMusicError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "replied_at": {
            "type": "integer"
          }
        },
        "required": [
          "status",
          "message",
          "replied_at"
        ]
      },
      "PersonalisedMusicSuccess": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "replied_at": {
            "type": "string"
          }
        },
        "required": [
          "schema",
          "method",
          "replied_at"
        ]
      },
      "PersonalisedMusicRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "meta_data": {
            "$ref": "#/components/schemas/PersonalisedMusicMetaData"
          },
          "added_at": {
            "type": "string"
          }
        },
        "required": [
          "action"
        ]
      },
      "PersonalisedMusicBatchRequest": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "meta_data": {
            "$ref": "#/components/schemas/PersonalisedMusicMetaData"
          },
          "added_at": {
            "type": "string"
          }
        },
        "required": [
          "domain",
          "type",
          "id",
          "action"
        ]
      },
      "MusicExportErrorResponse": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusicExportError"
            }
          }
        },
        "required": [
          "schema",
          "errors"
        ]
      },
      "MusicExportError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "replied_at": {
            "type": "integer"
          }
        },
        "required": [
          "status",
          "message",
          "replied_at"
        ]
      },
      "MusicExportSuccess": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "replied_at": {
            "type": "string"
          }
        },
        "required": [
          "schema",
          "method",
          "replied_at"
        ]
      },
      "MusicExportPreferencesResponse": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "replied_at": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusicExportPreferences"
            }
          }
        },
        "required": [
          "schema",
          "method",
          "total",
          "replied_at",
          "results"
        ]
      },
      "MusicExportPreferences": {
        "type": "object",
        "properties": {
          "vendor": {
            "type": "string"
          },
          "partner_id": {
            "type": "string"
          },
          "authorization_code": {
            "type": "string"
          },
          "access_expires_at": {
            "type": "string"
          },
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "last_export": {
            "type": "string"
          },
          "terms": {
            "type": "boolean"
          },
          "legacy_state": {
            "type": "string"
          },
          "add_plus_export": {
            "type": "boolean"
          }
        },
        "required": [
          "vendor",
          "partner_id",
          "authorization_code",
          "access_expires_at",
          "access_token",
          "refresh_token",
          "last_export",
          "terms",
          "legacy_state",
          "add_plus_export"
        ]
      },
      "MusicExportJob": {
        "type": "object",
        "properties": {
          "vendor": {
            "type": "string"
          },
          "job_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "vendor",
          "job_id",
          "created_at",
          "status",
          "id"
        ]
      },
      "Contact": {
        "type": "object",
        "properties": {
          "service": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "service",
          "handle",
          "url",
          "name"
        ]
      },
      "CategorySummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "category_summary"
            ]
          },
          "category_type": {
            "type": "string",
            "enum": [
              "genre",
              "format"
            ]
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "category_type",
          "id",
          "key",
          "title"
        ]
      },
      "CategoriesResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "$schema": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": [
          "total",
          "results",
          "offset",
          "$schema",
          "limit"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "category"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^[a-z][a-z|-]+[a-z]$",
            "example": "childrens-activities"
          },
          "depth": {
            "type": "integer",
            "enum": [
              1,
              2,
              3
            ],
            "example": 2
          },
          "url_key": {
            "type": "string",
            "pattern": "^[a-z]+$",
            "example": "activities"
          },
          "title": {
            "type": "string",
            "example": "Activities"
          },
          "pip_id": {
            "type": "string",
            "pattern": "^(C|PT){1}[0-9]+$",
            "example": "C00002"
          },
          "category_type": {
            "type": "string",
            "enum": [
              "genre",
              "format"
            ]
          },
          "child_categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        },
        "required": [
          "type",
          "id",
          "depth",
          "url_key",
          "title",
          "pip_id",
          "category_type",
          "child_categories"
        ]
      },
      "NetworksResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Network"
            }
          },
          "offset": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        },
        "required": [
          "total",
          "results",
          "offset",
          "limit"
        ]
      },
      "Network": {
        "type": "object",
        "properties": {
          "preset": {
            "type": "boolean"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "short_title": {
            "type": "string"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "key": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "international": {
            "type": "boolean"
          },
          "date_ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateRange"
            }
          },
          "promoted_category_summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategorySummary"
            }
          },
          "title": {
            "type": "string"
          },
          "sort": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "preset",
          "services",
          "short_title",
          "contacts",
          "key",
          "id",
          "international",
          "date_ranges",
          "title",
          "sort",
          "type",
          "group",
          "active"
        ]
      },
      "PolledNetwork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "short_title": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "short_title",
          "logo_url"
        ]
      },
      "Service": {
        "type": "object",
        "properties": {
          "default_language": {
            "type": "string"
          },
          "short_title": {
            "type": "string"
          },
          "coverage": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "date_ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateRange"
            }
          },
          "default": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "default_language",
          "short_title",
          "coverage",
          "id",
          "date_ranges",
          "default",
          "region",
          "title",
          "type",
          "active"
        ]
      },
      "DateRange": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string"
          },
          "end": {
            "type": "string"
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "BroadcastsResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string",
            "example": "https://rms.api.bbc.co.uk/docs/swagger.json#/definitions/BroadcastsResponse"
          },
          "total": {
            "type": "integer",
            "example": 5311
          },
          "limit": {
            "type": "integer",
            "example": 30
          },
          "offset": {
            "type": "integer",
            "example": 0
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Broadcast"
            }
          }
        },
        "required": [
          "$schema",
          "total",
          "limit",
          "offset",
          "results"
        ]
      },
      "Broadcast": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "broadcast"
          },
          "pid": {
            "type": "string",
            "example": "p06dg6y5"
          },
          "start": {
            "type": "string",
            "example": "2018-08-07T00:00:00Z"
          },
          "end": {
            "type": "string",
            "example": "2018-08-07T04:00:00Z"
          },
          "service_id": {
            "type": "string",
            "example": "bbc_radio_hereford_worcester"
          },
          "duration": {
            "type": "integer",
            "example": 14400
          },
          "progress": {
            "type": "integer",
            "example": 14400
          },
          "live": {
            "type": "boolean"
          },
          "blanked": {
            "type": "boolean"
          },
          "repeat": {
            "type": "boolean"
          },
          "critical": {
            "type": "boolean"
          },
          "webcast": {
            "type": "boolean"
          },
          "on_air": {
            "type": "boolean"
          },
          "programme": {
            "$ref": "#/components/schemas/Programme"
          }
        },
        "required": [
          "type",
          "pid",
          "start",
          "end",
          "service_id",
          "duration",
          "progress",
          "live",
          "blanked",
          "repeat",
          "critical",
          "webcast",
          "on_air",
          "programme"
        ]
      },
      "BroadcastsSummaryResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BroadcastSummary"
            }
          }
        },
        "required": [
          "$schema",
          "data"
        ]
      },
      "BroadcastSummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "urn": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "service_id": {
            "type": "string"
          },
          "duration": {
            "type": "integer"
          },
          "network": {
            "$ref": "#/components/schemas/PolledNetwork"
          },
          "titles": {
            "$ref": "#/components/schemas/Titles"
          },
          "image_url": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "urn",
          "start",
          "end",
          "service_id",
          "duration",
          "network",
          "titles",
          "image_url"
        ]
      },
      "ProgrammesResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgrammeSummary"
            }
          }
        },
        "required": [
          "$schema",
          "total",
          "limit",
          "offset",
          "results"
        ]
      },
      "ProgrammeSummary": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClipSummary"
          },
          {
            "$ref": "#/components/schemas/EpisodeSummary"
          },
          {
            "$ref": "#/components/schemas/BrandSummary"
          },
          {
            "$ref": "#/components/schemas/SeriesSummary"
          }
        ]
      },
      "ProgrammeTitles": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "programme_titles"
            ]
          },
          "entity_title": {
            "type": "string"
          },
          "display_title": {
            "type": "string"
          },
          "primary_title": {
            "type": "string",
            "nullable": true
          },
          "secondary_title": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "entity_title",
          "display_title",
          "primary_title",
          "secondary_title"
        ]
      },
      "NetworkSummary": {
        "type": "object",
        "nullable": true,
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "network_summary"
            ]
          },
          "id": {
            "type": "string"
          },
          "titles": {
            "$ref": "#/components/schemas/NetworkTitles"
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "group": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "id",
          "titles",
          "key",
          "group",
          "active"
        ]
      },
      "NetworkTitles": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "network_titles"
            ]
          },
          "short_title": {
            "type": "string"
          },
          "long_title": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "short_title",
          "long_title"
        ]
      },
      "BrandSummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "brand_summary"
            ]
          },
          "pid": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$"
          },
          "network_summary": {
            "$ref": "#/components/schemas/NetworkSummary"
          },
          "titles": {
            "$ref": "#/components/schemas/ProgrammeTitles"
          },
          "titles_hierarchy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TitlesHierarchy"
            }
          },
          "short_synopsis": {
            "type": "string",
            "nullable": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "total_available_episodes": {
            "type": "integer",
            "minimum": 0
          },
          "latest_available_episodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EpisodeSummary"
            }
          }
        },
        "required": [
          "type",
          "pid",
          "network_summary",
          "titles",
          "short_synopsis",
          "images",
          "total_available_episodes",
          "latest_available_episodes"
        ]
      },
      "SeriesSummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "series_summary"
            ]
          },
          "pid": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$"
          },
          "network_summary": {
            "$ref": "#/components/schemas/NetworkSummary"
          },
          "titles": {
            "$ref": "#/components/schemas/ProgrammeTitles"
          },
          "titles_hierarchy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TitlesHierarchy"
            }
          },
          "short_synopsis": {
            "type": "string",
            "nullable": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "total_available_episodes": {
            "type": "integer",
            "minimum": 0
          },
          "latest_available_episodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EpisodeSummary"
            }
          }
        },
        "required": [
          "type",
          "pid",
          "network_summary",
          "titles",
          "short_synopsis",
          "images",
          "total_available_episodes",
          "latest_available_episodes"
        ]
      },
      "EpisodeSummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "episode_summary"
            ]
          },
          "pid": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$"
          },
          "network_summary": {
            "$ref": "#/components/schemas/NetworkSummary"
          },
          "category_summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategorySummary"
            }
          },
          "release_date": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT00:00:00Z|)$"
          },
          "siblings_count": {
            "type": "integer",
            "minimum": 0
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "titles": {
            "$ref": "#/components/schemas/ProgrammeTitles"
          },
          "titles_hierarchy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TitlesHierarchy"
            }
          },
          "short_synopsis": {
            "type": "string",
            "nullable": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "media_type": {
            "type": "string",
            "nullable": true,
            "enum": [
              "audio",
              "video",
              "audio_video",
              "null"
            ]
          },
          "available": {
            "type": "boolean"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AncestorSummary"
            }
          },
          "available_versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          }
        },
        "required": [
          "type",
          "pid",
          "network_summary",
          "category_summaries",
          "release_date",
          "siblings_count",
          "titles",
          "short_synopsis",
          "images",
          "media_type",
          "available",
          "ancestors",
          "available_versions"
        ]
      },
      "ClipSummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clip_summary"
            ]
          },
          "pid": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$"
          },
          "network_summary": {
            "$ref": "#/components/schemas/NetworkSummary"
          },
          "category_summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategorySummary"
            }
          },
          "release_date": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT00:00:00Z|)$"
          },
          "siblings_count": {
            "type": "integer",
            "minimum": 0
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "titles": {
            "$ref": "#/components/schemas/ProgrammeTitles"
          },
          "titles_hierarchy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TitlesHierarchy"
            }
          },
          "short_synopsis": {
            "type": "string",
            "nullable": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "media_type": {
            "type": "string",
            "nullable": true,
            "enum": [
              "audio",
              "video",
              "audio_video",
              "null"
            ]
          },
          "available": {
            "type": "boolean"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AncestorSummary"
            }
          },
          "available_versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          }
        },
        "required": [
          "type",
          "pid",
          "network_summary",
          "category_summaries",
          "release_date",
          "siblings_count",
          "titles",
          "short_synopsis",
          "images",
          "media_type",
          "available",
          "ancestors",
          "available_versions"
        ]
      },
      "AvailableVersions": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "available_version"
            ]
          },
          "media_set": {
            "type": "string",
            "enum": [
              "mobile-cellular-main",
              "mobile-phone-main",
              "iptv-all",
              "pc"
            ]
          },
          "duration": {
            "type": "string"
          },
          "version_pid": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$"
          },
          "version_type": {
            "type": "string",
            "enum": [
              "original",
              "podcast",
              "editorial",
              "legal",
              "technical"
            ]
          },
          "has_guidance": {
            "type": "boolean"
          },
          "available_from_date": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\dZ|)$"
          },
          "available_to_date": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\dZ|)$"
          },
          "available": {
            "type": "string",
            "enum": [
              "available",
              "pending",
              "future"
            ]
          }
        },
        "required": [
          "type",
          "media_set",
          "duration",
          "version_pid",
          "version_type",
          "has_guidance",
          "available_from_date",
          "available_to_date",
          "available"
        ]
      },
      "AncestorSummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ancestor_summary"
            ]
          },
          "ancestor_type": {
            "type": "string",
            "enum": [
              "brand",
              "series",
              "episode"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$"
          },
          "titles": {
            "$ref": "#/components/schemas/AncestorTitles"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        },
        "required": [
          "type",
          "ancestor_type",
          "id",
          "titles",
          "images"
        ]
      },
      "AncestorTitles": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ancestor_title"
            ]
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "title"
        ]
      },
      "Image": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_summary"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$"
          },
          "template_url": {
            "type": "string"
          },
          "image_type": {
            "type": "string",
            "enum": [
              "standard"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "template_url",
          "image_type"
        ]
      },
      "MusicPopularityTracks": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "offset": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "repliedAt": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusicPopularityTrack"
            }
          }
        },
        "required": [
          "schema",
          "method",
          "total",
          "repliedAt",
          "results"
        ]
      },
      "MusicPopularityTrack": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "score": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "album": {
            "type": "string"
          },
          "recordImagePid": {
            "type": "string"
          },
          "radioEdit": {
            "type": "boolean"
          },
          "recordImageHref": {
            "type": "string"
          },
          "classical": {
            "type": "boolean"
          },
          "baseTitle": {
            "type": "string"
          },
          "artistGid": {
            "type": "string"
          },
          "artistName": {
            "type": "string"
          },
          "artists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusicTrackArtist"
            }
          },
          "recordAudio": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusicRecordAudio"
            }
          },
          "mergedIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "preferredRecordAudio": {
            "$ref": "#/components/schemas/MusicRecordAudio"
          },
          "preferredMultiplayRecordAudio": {
            "$ref": "#/components/schemas/MusicRecordAudio"
          }
        },
        "required": [
          "id",
          "score"
        ]
      },
      "MusicTrackArtist": {
        "type": "object",
        "properties": {
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sortName": {
            "type": "string"
          },
          "imagePid": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "required": [
          "gid",
          "name",
          "sortName",
          "imagePid",
          "role"
        ]
      },
      "MusicRecordAudio": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "duration": {
            "type": "integer"
          },
          "audioType": {
            "type": "string"
          }
        },
        "required": [
          "resourceType",
          "identifier",
          "duration",
          "audioType"
        ]
      },
      "MusicPopularityArtists": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "offset": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "repliedAt": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusicPopularityArtist"
            }
          }
        },
        "required": [
          "schema",
          "method",
          "total",
          "repliedAt",
          "results"
        ]
      },
      "MusicPopularityArtist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "score": {
            "type": "integer"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sortName": {
            "type": "string"
          },
          "imagePid": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "score",
          "gid",
          "name",
          "sortName",
          "imagePid"
        ]
      },
      "MusicPopularityPlaylists": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "offset": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "repliedAt": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusicPopularityPlaylist"
            }
          }
        },
        "required": [
          "schema",
          "method",
          "total",
          "repliedAt",
          "results"
        ]
      },
      "MusicPopularityPlaylist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "score": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "serviceId": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "externalPartners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalPartner"
            }
          },
          "updatedAt": {
            "type": "string"
          },
          "oneOff": {
            "type": "boolean"
          },
          "imagePid": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "wideImagePid": {
            "type": "string"
          },
          "wideImageUrl": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "commentsEnabled": {
            "type": "boolean"
          },
          "playlistPlaybackType": {
            "type": "string"
          },
          "genre": {
            "type": "string"
          },
          "mood": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "score",
          "title",
          "description",
          "serviceId",
          "kind",
          "categories",
          "externalPartners",
          "updatedAt",
          "oneOff",
          "imagePid",
          "imageUrl",
          "wideImagePid",
          "wideImageUrl",
          "visibility",
          "commentsEnabled",
          "playlistPlaybackType",
          "genre",
          "mood"
        ]
      },
      "ExternalPartner": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "PersonalisedRadioResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "offset": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "replied_at": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedRadioActivity"
            }
          }
        },
        "required": [
          "$schema",
          "method",
          "offset",
          "limit",
          "total",
          "replied_at",
          "results"
        ]
      },
      "PersonalisedRadioActivity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "added_at": {
            "type": "string"
          },
          "activity": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "uas_type": {
            "type": "string"
          },
          "urn": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          },
          "data": {
            "$ref": "#/components/schemas/ProgrammeSummary"
          }
        },
        "required": [
          "type",
          "action",
          "added_at",
          "activity",
          "domain",
          "id",
          "uas_type",
          "urn",
          "metadata",
          "data"
        ]
      },
      "MetaData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "programme_type": {
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/Origin"
          },
          "miscellaneous": {
            "$ref": "#/components/schemas/Miscellaneous"
          }
        },
        "required": [
          "type",
          "programme_type",
          "origin",
          "miscellaneous"
        ]
      },
      "Origin": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "intent": {
            "type": "string",
            "nullable": true
          },
          "origin": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "reason",
          "intent",
          "origin"
        ]
      },
      "Miscellaneous": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "PersonalisedMusicResponse": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "offset": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "replied_at": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicActivity"
            }
          }
        },
        "required": [
          "schema",
          "method",
          "offset",
          "limit",
          "total",
          "replied_at",
          "results"
        ]
      },
      "PersonalisedMusicActivity": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "added_at": {
            "type": "string"
          },
          "activity": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "urn": {
            "type": "string"
          },
          "meta_data": {
            "$ref": "#/components/schemas/PersonalisedMusicMetaData"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicData"
            }
          }
        },
        "required": [
          "action",
          "added_at",
          "activity",
          "domain",
          "id",
          "type",
          "urn",
          "meta_data",
          "data"
        ]
      },
      "PersonalisedMusicMetaData": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "PersonalisedMusicData": {
        "type": "object",
        "properties": {
          "playlist": {
            "$ref": "#/components/schemas/PersonalisedMusicPlaylist"
          },
          "service": {
            "$ref": "#/components/schemas/PersonalisedMusicService"
          },
          "genre": {
            "$ref": "#/components/schemas/PersonalisedMusicGenre"
          },
          "artist": {
            "$ref": "#/components/schemas/PersonalisedMusicArtist"
          },
          "track": {
            "$ref": "#/components/schemas/PersonalisedMusicTrack"
          },
          "clip": {
            "$ref": "#/components/schemas/PersonalisedMusicClip"
          }
        }
      },
      "PersonalisedMusicPlaylist": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "tracks": {
            "$ref": "#/components/schemas/PersonalisedMusicTrack"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicImage"
            }
          },
          "service_id": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/PersonalisedMusicPlaylistVersion"
          },
          "playback_type": {
            "type": "string"
          }
        }
      },
      "PersonalisedMusicPlaylistVersion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "starts_at": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "warnings"
        ]
      },
      "PersonalisedMusicService": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "PersonalisedMusicGenre": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "PersonalisedMusicArtist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicImage"
            }
          }
        }
      },
      "PersonalisedMusicImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PersonalisedMusicClip": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "synopsis": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "mediaType": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "masterbrandMid": {
            "type": "string"
          },
          "parentProgramme": {
            "$ref": "#/components/schemas/PersonalisedMusicClipParentProgramme"
          },
          "contributors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "$ref": "#/components/schemas/PersonalisedMusicVersion"
          }
        }
      },
      "PersonalisedMusicClipParentProgramme": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          }
        }
      },
      "PersonalisedMusicTrack": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "contributions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicTrackContribution"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicTrackImage"
            }
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicTrackMedia"
            }
          },
          "version": {
            "$ref": "#/components/schemas/PersonalisedMusicVersion"
          }
        },
        "required": [
          "id",
          "type",
          "title",
          "contributions",
          "images",
          "media",
          "version"
        ]
      },
      "PersonalisedMusicVersion": {
        "type": "object",
        "properties": {
          "vpid": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "radio": {
            "type": "boolean"
          },
          "classical": {
            "type": "boolean"
          }
        }
      },
      "PersonalisedMusicTrackMedia": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "duration": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "source",
          "format",
          "scope",
          "type",
          "duration"
        ]
      },
      "PersonalisedMusicTrackContribution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisedMusicTrackImage"
            }
          }
        },
        "required": [
          "id",
          "name",
          "role",
          "images"
        ]
      },
      "PersonalisedMusicTrackImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "format",
          "type"
        ]
      },
      "PodcastsResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Podcast"
            }
          }
        },
        "required": [
          "$schema",
          "total",
          "limit",
          "offset",
          "results"
        ]
      },
      "Podcast": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "entity_type": {
            "type": "string"
          },
          "titles": {
            "$ref": "#/components/schemas/ProgrammeTitles"
          },
          "first_published_date": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "synopses": {
            "$ref": "#/components/schemas/PodcastSynopses"
          },
          "rss_url": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "network_summary": {
            "$ref": "#/components/schemas/NetworkSummary"
          },
          "category_summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategorySummary"
            }
          },
          "frequency": {
            "type": "string"
          },
          "days_available": {
            "type": "integer"
          },
          "territory": {
            "type": "string"
          },
          "total_available_episodes": {
            "type": "integer"
          },
          "latest_available_episodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodcastEpisodeSummary"
            }
          }
        },
        "required": [
          "pid",
          "type",
          "entity_type",
          "titles",
          "first_published_date",
          "updated_at",
          "synopses",
          "rss_url",
          "images",
          "network_summary",
          "category_summaries",
          "frequency",
          "days_available",
          "territory",
          "total_available_episodes",
          "latest_available_episodes"
        ]
      },
      "PodcastEpisodeSummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "titles": {
            "$ref": "#/components/schemas/ProgrammeTitles"
          },
          "short_synopsis": {
            "type": "string"
          },
          "media_type": {
            "type": "string"
          },
          "asset_url": {
            "type": "string"
          },
          "release_date": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "network_summary": {
            "$ref": "#/components/schemas/NetworkSummary"
          },
          "available_versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          }
        },
        "required": [
          "type",
          "pid",
          "titles",
          "short_synopsis",
          "media_type",
          "asset_url",
          "release_date",
          "images",
          "network_summary",
          "available_versions"
        ]
      },
      "PodcastSynopses": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "short": {
            "type": "string"
          },
          "medium": {
            "type": "string"
          },
          "long": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "short",
          "medium",
          "long"
        ]
      },
      "PodcastEpisodesResponse": {
        "required": [
          "$schema",
          "total",
          "limit",
          "offset",
          "results"
        ],
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodcastEpisodeSummary"
            }
          }
        }
      },
      "PodcastErrorResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodcastError"
            }
          }
        }
      },
      "PodcastError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "status": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "replied_at": {
            "type": "string"
          }
        }
      },
      "PodcastsFeaturedResponse": {
        "required": [
          "$schema",
          "total",
          "limit",
          "offset",
          "results"
        ],
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodcastsFeatured"
            }
          }
        }
      },
      "PodcastsFeatured": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "featured_podcasts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Podcast"
            }
          }
        }
      },
      "PopularResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PopularItemSummary"
            }
          }
        },
        "required": [
          "$schema",
          "total",
          "limit",
          "offset",
          "results"
        ]
      },
      "PopularItemSummary": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "score": {
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/ProgrammeSummary"
          }
        },
        "required": [
          "type",
          "id",
          "score",
          "data"
        ]
      },
      "PersonalisedRadioRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/PersonalisedRadioMetaData"
          },
          "added_at": {
            "type": "string"
          }
        },
        "required": [
          "action"
        ]
      },
      "PersonalisedRadioBatchRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/PersonalisedRadioMetaData"
          },
          "added_at": {
            "type": "string"
          }
        },
        "required": [
          "action"
        ]
      },
      "PersonalisedRadioMetaData": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "ExperienceResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayModule"
            }
          }
        },
        "required": [
          "$schema",
          "data"
        ]
      },
      "ExperienceInlineResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InlineDisplayModule"
            }
          }
        },
        "required": [
          "$schema",
          "data"
        ]
      },
      "DisplayModule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "style": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "title",
          "description",
          "uri"
        ]
      },
      "InlineDisplayModule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "style": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          }
        },
        "required": [
          "type",
          "id",
          "title",
          "description",
          "data"
        ]
      },
      "Duration": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "label"
        ]
      },
      "ContinuousPlayContainer": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayableItem"
            }
          }
        },
        "required": [
          "type",
          "id",
          "members"
        ]
      },
      "Item": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ContainerItem"
          },
          {
            "$ref": "#/components/schemas/PlayableItem"
          }
        ]
      },
      "ItemsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "ItemsPaginatedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0,
            "example": 305819
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "example": 30
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "example": 0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          }
        },
        "required": [
          "total",
          "limit",
          "offset",
          "data"
        ]
      },
      "ContainerItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "container_item"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,}|[a-zA-Z0-9_]{1,})$",
            "example": "p03q8kd9"
          },
          "urn": {
            "type": "string",
            "pattern": "^urn:bbc:radio:[a-zA-Z0-9:_]{1,}$",
            "example": "urn:bbc:radio:brand|series|collection|category:p03q8kd9"
          },
          "network": {
            "$ref": "#/components/schemas/ContainerItemNetwork"
          },
          "titles": {
            "$ref": "#/components/schemas/ContainerItemTitles"
          },
          "synopses": {
            "$ref": "#/components/schemas/ContainerItemSynopses"
          },
          "image_url": {
            "type": "string",
            "example": "https://ichef.bbci.co.uk/images/ic/{recipe}/p05hw82b.jpg"
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerItemActivity"
            }
          },
          "uris": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerItemUri"
            }
          }
        },
        "required": [
          "type",
          "id",
          "urn",
          "network",
          "titles",
          "synopses",
          "image_url",
          "activities",
          "uris"
        ]
      },
      "ContainerItemsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerItem"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "ContainerItemsPaginatedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0,
            "example": 100
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "example": 30
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "example": 0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerItem"
            }
          }
        },
        "required": [
          "total",
          "limit",
          "offset",
          "data"
        ]
      },
      "ContainerItemNetwork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "bbc_world_service"
          },
          "key": {
            "type": "string",
            "nullable": true,
            "example": "worldserviceradio"
          },
          "short_title": {
            "type": "string",
            "example": "World Service"
          },
          "logo_url": {
            "type": "string",
            "example": "https://sounds.files.bbci.co.uk/v2/networks/bbc_world_service/{type}_{size}.{format}"
          }
        },
        "required": [
          "id",
          "key",
          "short_title",
          "logo_url"
        ]
      },
      "ContainerItemTitles": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "string",
            "example": "BBC Minute"
          },
          "secondary": {
            "type": "string",
            "nullable": true,
            "example": "Lorem ipsum"
          },
          "tertiary": {
            "type": "string",
            "nullable": true,
            "example": "Lorem ipsum"
          }
        },
        "required": [
          "primary",
          "secondary",
          "tertiary"
        ]
      },
      "ContainerItemSynopses": {
        "type": "object",
        "properties": {
          "short": {
            "type": "string",
            "example": "One minute of the world's most shareable news"
          },
          "medium": {
            "type": "string",
            "nullable": true,
            "example": "Drop into BBC Minute every half an hour"
          },
          "long": {
            "type": "string",
            "nullable": true,
            "example": "updated every half an hour, 24/7."
          }
        },
        "required": [
          "short",
          "medium",
          "long"
        ]
      },
      "ContainerItemActivity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "follow_activity"
          },
          "action": {
            "type": "string",
            "example": "followed"
          }
        },
        "required": [
          "type",
          "action"
        ]
      },
      "ContainerItemUri": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "latest"
          },
          "label": {
            "type": "string",
            "example": "Latest"
          },
          "uri": {
            "type": "string",
            "example": "/v2/programmes/playable?container=p03q8kd9&sort=-available_from_date&type=episode"
          }
        },
        "required": [
          "type",
          "label",
          "uri"
        ]
      },
      "PlayableItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "playable_item"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,}|[a-zA-Z0-9_]{1,})$",
            "example": "b08vxtj4"
          },
          "urn": {
            "type": "string",
            "pattern": "^urn:bbc:radio:[a-zA-Z0-9:_]{1,}$",
            "example": "urn:bbc:radio:episode|network|segment:b08vxv2w"
          },
          "network": {
            "$ref": "#/components/schemas/PlayableItemNetwork"
          },
          "titles": {
            "$ref": "#/components/schemas/PlayableItemTitles"
          },
          "synopses": {
            "$ref": "#/components/schemas/PlayableItemSynopses"
          },
          "image_url": {
            "type": "string",
            "example": "https://ichef.bbci.co.uk/images/ic/{recipe}/p054zzwj.jpg"
          },
          "duration": {
            "$ref": "#/components/schemas/PlayableItemDuration"
          },
          "progress": {
            "$ref": "#/components/schemas/PlayableItemProgress"
          },
          "container": {
            "$ref": "#/components/schemas/PlayableItemContainer"
          },
          "download": {
            "$ref": "#/components/schemas/PlayableItemDownload"
          },
          "availability": {
            "$ref": "#/components/schemas/PlayableItemAvailability"
          },
          "guidance": {
            "$ref": "#/components/schemas/PlayableItemGuidance"
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayableItemActivity"
            }
          },
          "uris": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayableItemUri"
            }
          }
        },
        "required": [
          "type",
          "id",
          "urn",
          "network",
          "titles",
          "synopses",
          "image_url",
          "duration",
          "progress",
          "container",
          "download",
          "availability",
          "guidance",
          "activities",
          "uris"
        ]
      },
      "PlayableItemsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayableItem"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "PlayableItemsPaginatedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0,
            "example": 287365
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "example": 30
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "example": 0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayableItem"
            }
          }
        },
        "required": [
          "total",
          "limit",
          "offset",
          "data"
        ]
      },
      "PlayableItemActivity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "favourite_activity"
          },
          "action": {
            "type": "string",
            "example": "favourited"
          }
        },
        "required": [
          "type",
          "action"
        ]
      },
      "PlayableItemAvailability": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\dZ|)$",
            "example": "2017-06-26T16:00:28Z"
          },
          "to": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\dZ|)$",
            "example": "2021-06-26T16:00:28Z"
          },
          "label": {
            "type": "string",
            "example": "Available for over a year"
          }
        },
        "required": [
          "from",
          "to",
          "label"
        ]
      },
      "PlayableItemDuration": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "minimum": 0,
            "example": 1800
          },
          "label": {
            "type": "string",
            "example": "30 mins"
          }
        },
        "required": [
          "value",
          "label"
        ]
      },
      "PlayableItemNetwork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "bbc_radio_four"
          },
          "key": {
            "type": "string",
            "nullable": true,
            "example": "radio4"
          },
          "short_title": {
            "type": "string",
            "example": "Radio 4"
          },
          "logo_url": {
            "type": "string",
            "example": "https://sounds.files.bbci.co.uk/v2/networks/bbc_radio_four/{type}_{size}.{format}"
          }
        },
        "required": [
          "id",
          "key",
          "short_title",
          "logo_url"
        ]
      },
      "PlayableItemProgress": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "minimum": 0
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "label"
        ]
      },
      "PlayableItemSynopses": {
        "type": "object",
        "properties": {
          "short": {
            "type": "string",
            "example": "A discussion on the different ways of understanding the world around us."
          },
          "medium": {
            "type": "string",
            "nullable": true,
            "example": "Discussion programme in which guests from different faith and non-faith"
          },
          "long": {
            "type": "string",
            "nullable": true,
            "example": "debate the challenges of today's world."
          }
        },
        "required": [
          "short",
          "medium",
          "long"
        ]
      },
      "PlayableItemTitles": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "string",
            "example": "Beyond Belief"
          },
          "secondary": {
            "type": "string",
            "nullable": true,
            "example": "Public Grief"
          },
          "tertiary": {
            "type": "string",
            "nullable": true,
            "example": "Lorem ipsum"
          }
        },
        "required": [
          "primary",
          "secondary",
          "tertiary"
        ]
      },
      "PlayableItemUri": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "latest"
          },
          "label": {
            "type": "string",
            "example": "Latest"
          },
          "uri": {
            "type": "string",
            "example": "/v2/programmes/playable?container=b006s6p6&sort=-available_from_date&type=episode"
          }
        },
        "required": [
          "type",
          "label",
          "uri"
        ]
      },
      "PlayableItemContainer": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "brand"
          },
          "id": {
            "type": "string",
            "example": "b006s6p6"
          },
          "urn": {
            "type": "string",
            "example": "urn:bbc:radio:brand:b006s6p6"
          },
          "title": {
            "type": "string",
            "example": "Beyond Belief"
          },
          "synopses": {
            "$ref": "#/components/schemas/PlayableItemSynopses"
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerItemActivity"
            }
          }
        },
        "required": [
          "type",
          "id",
          "urn",
          "title",
          "synopses",
          "activities"
        ]
      },
      "PlayableItemDownload": {
        "type": "object",
        "nullable": true,
        "properties": {
          "type": {
            "type": "string",
            "example": "drm"
          },
          "quality_variants": {
            "$ref": "#/components/schemas/PlayableItemDownloadQualityVariants"
          }
        },
        "required": [
          "type",
          "quality_variants"
        ]
      },
      "PlayableItemDownloadQualityVariants": {
        "type": "object",
        "properties": {
          "low": {
            "$ref": "#/components/schemas/PlayableItemDownloadQualityVariantsValues"
          },
          "medium": {
            "$ref": "#/components/schemas/PlayableItemDownloadQualityVariantsValues"
          },
          "high": {
            "$ref": "#/components/schemas/PlayableItemDownloadQualityVariantsValues"
          }
        },
        "required": [
          "low",
          "medium",
          "high"
        ]
      },
      "PlayableItemDownloadQualityVariantsValues": {
        "type": "object",
        "properties": {
          "bitrate": {
            "type": "integer",
            "example": 96
          },
          "file_url": {
            "type": "string",
            "example": "https://open.live.bbc.co.uk/mediaselector/5/redir/version/2.0/mediaset/audio-nondrm-download/proto/http/vpid/p03t19g4.mp3",
            "nullable": true
          },
          "label": {
            "type": "string",
            "example": "144 MB"
          }
        },
        "required": [
          "bitrate",
          "file_url",
          "label"
        ]
      },
      "PlayableItemGuidance": {
        "type": "object",
        "properties": {
          "competition_warning": {
            "type": "boolean"
          },
          "warnings": {
            "$ref": "#/components/schemas/PlayableItemGuidanceWarnings"
          }
        },
        "required": [
          "competition_warning",
          "warnings"
        ]
      },
      "PlayableItemGuidanceWarnings": {
        "type": "object",
        "properties": {
          "short": {
            "type": "string",
            "example": "Contains language that may offend."
          },
          "long": {
            "type": "string",
            "example": "Contains language which some may find offensive."
          }
        },
        "required": [
          "short",
          "long"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string",
            "example": "https://rms.api.bbc.co.uk/docs/swagger.json#/definitions/ErrorResponse"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "required": [
          "$schema",
          "errors"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6ec7045c-2148-40e2-8a92-f3ad57302a69"
          },
          "href": {
            "type": "string",
            "example": "http://confluence.dev.bbc.co.uk/display/RMServices"
          },
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string"
          },
          "replied_at": {
            "type": "string",
            "example": "2018-08-01T15:34:09Z"
          }
        },
        "required": [
          "id",
          "href",
          "status",
          "message",
          "replied_at"
        ]
      },
      "Titles": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "string"
          },
          "secondary": {
            "type": "string"
          },
          "tertiary": {
            "type": "string"
          }
        },
        "required": [
          "primary",
          "secondary",
          "tertiary"
        ]
      },
      "TitlesHierarchy": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "title"
            ]
          },
          "entity_type": {
            "type": "string",
            "enum": [
              "brand",
              "series",
              "clip",
              "episode"
            ]
          },
          "pid": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "entity_type",
          "pid",
          "title"
        ]
      },
      "Position": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "programme_position"
            ]
          },
          "position": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          }
        },
        "required": [
          "type",
          "position",
          "total"
        ]
      },
      "V2ProgrammeNetwork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "bbc_world_service"
          },
          "key": {
            "type": "string",
            "nullable": true,
            "example": "worldserviceradio"
          },
          "short_title": {
            "type": "string",
            "example": "World Service"
          },
          "long_title": {
            "type": "string",
            "example": "BBC World Service"
          },
          "group": {
            "type": "string",
            "example": "radio"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "key",
          "short_title",
          "long_title",
          "group",
          "active"
        ]
      },
      "V2ProgrammeImage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "standard"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$",
            "example": "p06gcjdb"
          },
          "url": {
            "type": "string",
            "example": "https://ichef.bbci.co.uk/images/ic/{recipe}/p06gcjdb.jpg"
          }
        },
        "required": [
          "type",
          "id",
          "url"
        ]
      },
      "V2ProgrammeCategory": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "genre",
              "format"
            ]
          },
          "id": {
            "type": "string",
            "example": "factual-scienceandnature"
          },
          "key": {
            "type": "string",
            "example": "scienceandnature"
          },
          "title": {
            "type": "string",
            "example": "Science & Nature"
          }
        },
        "required": [
          "type",
          "id",
          "key",
          "title"
        ]
      },
      "V2ProgrammeAncestors": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "brand",
              "series",
              "episode"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$",
            "example": "p002w557"
          },
          "title": {
            "type": "string",
            "example": "Discovery"
          }
        },
        "required": [
          "type",
          "id",
          "title"
        ]
      },
      "V2ProgrammeAvailability": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "original",
              "podcast",
              "editorial",
              "legal",
              "technical"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$",
            "example": "w4hqry66"
          },
          "duration": {
            "type": "integer",
            "minimum": 0,
            "example": 1590
          },
          "has_guidance": {
            "type": "boolean"
          },
          "available_from_date": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\dZ|)$",
            "example": "2018-08-06T20:00:48Z"
          },
          "available_to_date": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\dZ|)$",
            "example": "2019-08-06T20:00:48Z"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "pending",
              "future"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "duration",
          "has_guidance",
          "available_from_date",
          "available_to_date",
          "status"
        ]
      },
      "Programme": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^([0-9|b-d|f-h|j-n|p-t|v-z]{8,})$",
            "example": "w3csxh9f"
          },
          "network": {
            "$ref": "#/components/schemas/V2ProgrammeNetwork"
          },
          "titles": {
            "$ref": "#/components/schemas/PlayableItemTitles"
          },
          "synopses": {
            "$ref": "#/components/schemas/PlayableItemSynopses"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2ProgrammeImage"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2ProgrammeCategory"
            }
          }
        },
        "required": [
          "id",
          "network",
          "titles",
          "synopses",
          "images",
          "categories"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/V2Episode"
          },
          {
            "$ref": "#/components/schemas/V2Clip"
          },
          {
            "$ref": "#/components/schemas/V2Brand"
          },
          {
            "$ref": "#/components/schemas/V2Series"
          }
        ]
      },
      "Programmes": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0,
            "example": 305812
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "example": 30
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "example": 0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Programme"
            }
          }
        },
        "required": [
          "total",
          "limit",
          "offset",
          "data"
        ]
      },
      "V2Episode": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "episode"
            ]
          },
          "urn": {
            "type": "string",
            "pattern": "^urn:bbc:radio:episode:[0-9|b-d|f-h|j-n|p-t|v-z]{8,}$",
            "example": "urn:bbc:radio:episode:w3csxh9f"
          },
          "media_type": {
            "type": "string",
            "enum": [
              "audio",
              "video",
              "audio_video",
              "null"
            ]
          },
          "release_date": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT00:00:00Z|)$",
            "example": "2018-08-06T00:00:00Z"
          },
          "siblings_count": {
            "type": "integer",
            "minimum": 0,
            "example": 2
          },
          "position": {
            "$ref": "#/components/schemas/V2Position"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2ProgrammeAncestors"
            }
          },
          "availability": {
            "$ref": "#/components/schemas/V2ProgrammeAvailability"
          }
        },
        "required": [
          "type",
          "urn",
          "media_type",
          "release_date",
          "siblings_count",
          "position",
          "ancestors",
          "availability"
        ]
      },
      "V2Clip": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clip"
            ]
          },
          "urn": {
            "type": "string",
            "pattern": "^urn:bbc:radio:clip:[0-9|b-d|f-h|j-n|p-t|v-z]{8,}$",
            "example": "urn:bbc:radio:clip:w3csxh9f"
          },
          "media_type": {
            "type": "string",
            "enum": [
              "audio",
              "video",
              "audio_video",
              "null"
            ]
          },
          "release_date": {
            "type": "string",
            "nullable": true,
            "pattern": "^(\\d{4}-[0-1]\\d-[0-3]\\dT00:00:00Z|)$",
            "example": "2018-08-06T00:00:00Z"
          },
          "siblings_count": {
            "type": "integer",
            "minimum": 0,
            "example": 2
          },
          "position": {
            "$ref": "#/components/schemas/V2Position"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2ProgrammeAncestors"
            }
          },
          "availability": {
            "$ref": "#/components/schemas/V2ProgrammeAvailability"
          }
        },
        "required": [
          "type",
          "urn",
          "media_type",
          "release_date",
          "siblings_count",
          "position",
          "ancestors",
          "availability"
        ]
      },
      "V2Brand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "brand"
            ]
          },
          "urn": {
            "type": "string",
            "pattern": "^urn:bbc:radio:brand:[0-9|b-d|f-h|j-n|p-t|v-z]{8,}$",
            "example": "urn:bbc:radio:brand:p002w557"
          }
        },
        "required": [
          "type",
          "urn"
        ]
      },
      "V2Series": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "series"
            ]
          },
          "urn": {
            "type": "string",
            "pattern": "^urn:bbc:radio:series:[0-9|b-d|f-h|j-n|p-t|v-z]{8,}$",
            "example": "urn:bbc:radio:brand:w27vq14h"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2ProgrammeAncestors"
            }
          }
        },
        "required": [
          "type",
          "urn",
          "ancestors"
        ]
      },
      "V2Position": {
        "type": "object",
        "properties": {
          "position": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": 2
          },
          "total": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": 5
          }
        },
        "required": [
          "position",
          "total"
        ]
      },
      "V2CategoriesResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string",
            "example": "https://rms.api.bbc.co.uk/docs/swagger.json#/definitions/V2CategoriesResponse"
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "example": 27
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "example": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "example": 30
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        },
        "required": [
          "total",
          "offset",
          "limit",
          "data"
        ]
      },
      "V2NetworksResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2Network"
            }
          }
        },
        "required": [
          "total",
          "offset",
          "limit",
          "data"
        ]
      },
      "V2Network": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "network"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^[a-z0-9_]+$",
            "example": "bbc_radio_one"
          },
          "coverage": {
            "type": "string",
            "enum": [
              "national",
              "regional",
              "local"
            ]
          },
          "key": {
            "type": "string",
            "pattern": "^[a-z0-9]+$",
            "example": "radio1"
          },
          "short_title": {
            "type": "string",
            "example": "Radio 1"
          },
          "long_title": {
            "type": "string",
            "example": "BBC Radio 1"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2Service"
            }
          }
        },
        "required": [
          "type",
          "id",
          "coverage",
          "key",
          "short_title",
          "long_title",
          "services"
        ]
      },
      "V2Service": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "service"
            ]
          },
          "id": {
            "type": "string",
            "pattern": "^[a-z0-9_]+$",
            "example": "bbc_radio_one"
          }
        },
        "required": [
          "type",
          "id"
        ]
      },
      "ExperienceContainerResponse": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HeaderModule"
                },
                {
                  "$ref": "#/components/schemas/DisplayModule"
                }
              ]
            }
          }
        },
        "required": [
          "$schema",
          "data"
        ]
      },
      "HeaderModule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "header_module"
            ]
          },
          "id": {
            "type": "string",
            "enum": [
              "container"
            ]
          },
          "style": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "example": "Composer of the Week"
          },
          "description": {
            "type": "string",
            "example": "Radio 3's Composer of the Week series"
          },
          "data": {
            "$ref": "#/components/schemas/ContainerItem"
          }
        },
        "required": [
          "type",
          "id",
          "style",
          "title",
          "description",
          "data"
        ]
      }
    },
    "responses": {
      "InternalServiceError": {
        "description": "There is an internal service error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authorization token is invalid or Expired",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Notfound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Invalid value provided",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "TextResponse": {
        "description": "Request successfully sent to UAS.",
        "content": {
          "text:plain": {
            "schema": {
              "type": "string",
              "example": "The request has been accepted for processing, but the processing has not been completed."
            }
          }
        }
      },
      "v1ErrorStates": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Not found"
                }
              }
            }
          }
        }
      },
      "RadioErrorMessage": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PersonalisedRadioErrorResponse"
            }
          }
        }
      },
      "MusicErrorMessage": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PersonalisedMusicErrorResponse"
            }
          }
        }
      },
      "MusicExportErrorMessage": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MusicExportErrorResponse"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Experience"
    },
    {
      "name": "Categories"
    },
    {
      "name": "Networks"
    },
    {
      "name": "Services"
    },
    {
      "name": "Versions"
    },
    {
      "name": "Broadcasts"
    },
    {
      "name": "Collections"
    },
    {
      "name": "Podcasts"
    },
    {
      "name": "Programmes"
    },
    {
      "name": "Personalised Activities"
    },
    {
      "name": "Personalised Programmes",
      "externalDocs": {
        "description": "Client Documentation",
        "url": "https://confluence.dev.bbc.co.uk/display/RMServices/Pendulum+Client+Documentation"
      }
    },
    {
      "name": "Radio"
    },
    {
      "name": "Music"
    },
    {
      "name": "Music Export"
    }
  ]
}